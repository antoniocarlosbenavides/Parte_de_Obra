# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ParteObraDockWidget
                                 A QGIS plugin
 Parte de Obra con Fotos de Campo Comentadas incluso Incidencias
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-05-18
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Antonio Carlos Benavides García
        email                : antonio.benavides@usal.es
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
# para ruta y para borrar el archivo existente previo
from os import remove
import pathlib # importa la libreria de rutas pathlib y va así a pelo
from pathlib import Path

import qgis.gui
from PyQt5.QtGui import QPixmap
from qgis.PyQt.QtWidgets import QAction, QFileDialog, QMessageBox, QInputDialog, QLabel, QDialog
from qgis.gui import QgsFileWidget, QgsMessageBar
from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal
from qgis.core import QgsProject,QgsDataProvider,QgsVectorLayer,QgsFeature,QgsGeometry,QgsField,QgsPointXY, QgsVectorFileWriter, QgsRectangle, QgsRasterLayer
# QgsVectorFileWriter esta clase es para escribir en disco
from PyQt5.QtCore import QDate, QDateTime

from qgis import processing #necesario para ejecutar comandos de la caja de herramientas


FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ParteObra_dockwidget_base.ui'))


class ParteObraDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        #    C O N S T R U C T O R
        #        L L A M A D A  A  F U N C I O N E S

        """Constructor."""
        super(ParteObraDockWidget, self).__init__(parent)
        self.setupUi(self)
       
        #**** PESTAÑA 1 ******
        self.qfw_selector.setStorageMode(QgsFileWidget.GetDirectory)
        self.pb_cargar_capa.clicked.connect(self.cargar)
        self.btn_importar.clicked.connect(self.importar) 
        #desde el botón btn_importar se llama a la función importar
        self.tw_seleccion.itemSelectionChanged.connect(self.focoimagen)


        #**** PESTAÑA 2 ******
        self.btn_actualizar.clicked.connect(self.actualizar_capas)
        global lista_capas #variable global
        capas = [capa for capa in QgsProject.instance().mapLayers().values() if capa.type() == QgsVectorLayer.VectorLayer] 
        #capas=QgsProject.instance().mapLayers().values() # coge los valores de las capas de la instancia actual del proyecto y lo guarda 
        lista_capas=[]
        # para una variable una_capa en la lista de capas
        # recorre todas las capas y para cada una de ellas te quedas con el nombre en una lista
        lista_capas=[una_capa.name() for una_capa in capas]
        self.cmb_capas.clear() #borra el contenido del cuadro combinado
        self.cmb_capas.addItems(lista_capas)
        self.cmb_capas.currentIndexChanged.connect(self.elegir) #al seleccionar desplegable activa la función elegir
        self.pb_registra.clicked.connect(self.registra_cambios)
        self.btn_pnoa.clicked.connect(self.pnoa)
       
    def pnoa(self,event):
        #    C A R G A  R A S T E R   O R T O  P N O A
        
        #pnoa max actualidad. Carga el ráster del servicio WMS
        urlWithParams = "crs=EPSG:4326&format=image/png&layers=OI.OrthoimageCoverage&styles&url=http://www.ign.es/wms-inspire/pnoa-ma"
        wmsLayer3 = QgsRasterLayer(urlWithParams, 'PNOA MA', 'wms')
        QgsProject.instance().addMapLayer(wmsLayer3)
    
    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
        
    def actualizar_capas(self, event):
        #    A C T U A L I Z A   L I S T A   C A P A S
      
        #Actualiza todas las capas del proyecto de tipo vectorial y las incorpora en una lista de la que seleccionamos una
        global lista_capas #variable global
        capas = [capa for capa in QgsProject.instance().mapLayers().values() if capa.type() == QgsVectorLayer.VectorLayer] 
        #capas=QgsProject.instance().mapLayers().values() # coge los valores de las capas de la instancia actual del proyecto y lo guarda 
        lista_capas=[]
        # para una variable una_capa en la lista de capas
        # recorre todas las capas y para cada una de ellas te quedas con el nombre en una lista
        lista_capas=[una_capa.name() for una_capa in capas]
        self.cmb_capas.clear() #borra el contenido del cuadro combinado
        self.cmb_capas.addItems(lista_capas)
    
    def elegir(self, event):
        #    C A P A   A C T I V A

        #pondrá en el label el elemento seleccionado en el combo
        self.txt_activa.setText(self.cmb_capas.currentText()) 
     
    def importar(self, event):
        #    I M P O R T A C I O N    F O T O S
        #          I N T E R S E C C I Ó N
        #                C A R G A   L A   C A P A
       
        #Importa fotos geoetiquetadas y luego las intersecta con trazabilidad y carga la capa 
        self.lb_casco.setText("")
        self.lb_casco2.setText("")

        #llamada a importar fotos caja herramientas

        ruta0=self.qfw_traza.filePath()
        ruta=self.qfw_selector.filePath()
        ruta2=ruta + '/previo.gpkg'

        path=pathlib.PurePath(ruta) #ruta de la carpeta
        ultima_carpeta=path.name #nombre de la carpeta ultima
        ruta3=ruta+'/'+ultima_carpeta+'.gpkg' #nombre del archivo tomado de la carpeta.gpkg

        # si ya existía, advierte y se detiene, sino existe prosigue
        if os.path.exists(ruta3):
            self.lb_casco.setText("Atención: El archivo existe")
            self.lb_casco2.setText("Bórralo y carga de nuevo")
            return

        processing.run("native:importphotos", {'FOLDER': ruta,
            'RECURSIVE':True,
            'OUTPUT':ruta2,
            'INVALID':''})
        
        #intersección con trazabilidad

        processing.run("native:intersection", {'INPUT': ruta2,
            'OVERLAY':ruta0,
            'INPUT_FIELDS':'',
            'OVERLAY_FIELDS':'',
            'OVERLAY_FIELDS_PREFIX':'',
            'OUTPUT':ruta3}) 
            # la salida se llama como la carpeta


        #carga la capa intersectada ; añade la capa ultima_carpeta
        vlayer = QgsVectorLayer(ruta3, ultima_carpeta)
        vlayer.updateExtents()
        QgsProject.instance().addMapLayer(vlayer)
    
    def cargar(self,event):
        #     C A R G A   L A   T A B L A
        
        #de la lista de capas elige una y se selecciona en el tw_seleccion de QtDesigner
        capas_seleccionadas=QgsProject.instance().mapLayersByName(self.txt_activa.text())
        capa_seleccionada=capas_seleccionadas[0]
        self.tw_seleccion.setRowCount(0)
        registros=capa_seleccionada.getFeatures() #de la capa seleccionada activa sus campos
        for registro in registros: #carga el contenido de los campos de la fila en la tabla Table Widget de QtDesigner
            self.tw_seleccion.insertRow(self.tw_seleccion.rowCount())
            self.tw_seleccion.setItem(self.tw_seleccion.rowCount()-1,0,QtWidgets.QTableWidgetItem(str(registro["incidencia"])))
            self.tw_seleccion.setItem(self.tw_seleccion.rowCount()-1,1,QtWidgets.QTableWidgetItem(registro["timestamp"].toString("dd/MM/yyyy")))
            self.tw_seleccion.setItem(self.tw_seleccion.rowCount()-1,2,QtWidgets.QTableWidgetItem(str(registro["DESCRIPCION"])))
            self.tw_seleccion.setItem(self.tw_seleccion.rowCount()-1,3,QtWidgets.QTableWidgetItem(str(registro["DESCRIPCION_TRAZA"])))
            self.tw_seleccion.setItem(self.tw_seleccion.rowCount()-1,4,QtWidgets.QTableWidgetItem(str(registro["CODIGO"])))
            self.tw_seleccion.setItem(self.tw_seleccion.rowCount()-1,5,QtWidgets.QTableWidgetItem(str(registro["longitude"])))
            self.tw_seleccion.setItem(self.tw_seleccion.rowCount()-1,6,QtWidgets.QTableWidgetItem(str(registro["latitude"])))
            self.tw_seleccion.setItem(self.tw_seleccion.rowCount()-1,7,QtWidgets.QTableWidgetItem(str(registro["photo"])))
            self.tw_seleccion.setItem(self.tw_seleccion.rowCount()-1,8,QtWidgets.QTableWidgetItem(str(registro["fid"])))
    
    def focoimagen(self):
        #    C E N T R A R   M A P A

        fila=self.tw_seleccion.currentRow()
        
        # Definir las coordenadas específicas (en este caso, latitud y longitud)     
        latitud = float(self.tw_seleccion.item(fila,6).text())
        longitud = float(self.tw_seleccion.item(fila,5).text())
        # Crear un objeto QgsRectangle con las coordenadas
        map_pos = QgsPointXY(longitud, latitud) #referencia a la posicion del punto xy
        rect = QgsRectangle(map_pos, map_pos) #este rectangulo, no tiene dimension es de 0x0 pero centraliza el punto
        mc=qgis.utils.iface.mapCanvas() #llamada al canvas de Qgis (el mapa)
        mc.setExtent(rect) #la vista de mapa será la extensión del rectánculo, es decir, el punto seleccionado
        mc.refresh() #actualiza la vista de mapa
        #seleccionar actual en el mapa
        capas_seleccionadas=QgsProject.instance().mapLayersByName(self.txt_activa.text())
        capa_seleccionada=capas_seleccionadas[0]
        clave=self.tw_seleccion.item(fila,8).text()
        capa_seleccionada.selectByExpression("\"fid\"="+clave)
        #foto
        rutafoto=self.tw_seleccion.item(fila,7).text()
        self.le_ruta.setText(rutafoto)
        imagen=QPixmap(rutafoto)
        self.lb_foto.setPixmap(imagen)
        self.lb_foto.adjustSize()
        
        #incidencia
        inciden=self.tw_seleccion.item(fila,0).text()
        if (inciden=="True"):
            self.cb_incidencia.setChecked(True)
        else:
            self.cb_incidencia.setChecked(False)

        #trazabilidad
        trazab=self.tw_seleccion.item(fila,3).text()
        self.te_traza.setText(trazab)
        
        #descripcion
        descrip=self.tw_seleccion.item(fila,2).text()
        self.te_descripcion.setText(descrip)

        #fid campo clave
        fid=self.tw_seleccion.item(fila,8).text()
        self.te_clave.setText(fid)
        
        #fecha
        fec=self.tw_seleccion.item(fila,1).text()
        self.de_fecha.setDate(QDate.fromString(fec,"dd/MM/yyyy"))

    def registra_cambios(self,event):
        #    A C T U A L I Z A   L A  T A B L A   D E   A T R I B U T O S
        #        S E G U N  S E  C A M B I A N  D A T O S  EN   F O R M U L A R I O

        capas_seleccionadas=QgsProject.instance().mapLayersByName(self.txt_activa.text())
        capa_seleccionada=capas_seleccionadas[0]
        fila=self.tw_seleccion.currentRow()
        clave=int(self.tw_seleccion.item(fila,8).text())
        descrip=self.te_descripcion.toPlainText()
        #fec=self.de_fecha.date()
        if(self.cb_incidencia.isChecked()):
            inciden=True
        else:
            inciden=False
        
        #empieza edicion
        capa_seleccionada.startEditing()
        
        #cambiamos todos los campos actualizando contenidos con la Qtable
        capa_seleccionada.changeAttributeValue(clave, 13, descrip)
        capa_seleccionada.changeAttributeValue(clave, 14, inciden)
        #capa_seleccionada.changeAttributeValue(clave, 14, fec)
        
        capa_seleccionada.commitChanges()
        #cambia en la capa pero no en la tabla
        #borramos filas de la tabla y volvemos a cargar:
        self.tw_seleccion.setRowCount(0)
        capas_seleccionadas=QgsProject.instance().mapLayersByName(self.txt_activa.text())
        capa_seleccionada=capas_seleccionadas[0]
        registros=capa_seleccionada.getFeatures()
        for registro in registros: 
            self.tw_seleccion.insertRow(self.tw_seleccion.rowCount())
            self.tw_seleccion.setItem(self.tw_seleccion.rowCount()-1,0,QtWidgets.QTableWidgetItem(str(registro["incidencia"])))
            self.tw_seleccion.setItem(self.tw_seleccion.rowCount()-1,1,QtWidgets.QTableWidgetItem(registro["timestamp"].toString("dd/MM/yyyy")))
            self.tw_seleccion.setItem(self.tw_seleccion.rowCount()-1,2,QtWidgets.QTableWidgetItem(str(registro["DESCRIPCION"])))
            self.tw_seleccion.setItem(self.tw_seleccion.rowCount()-1,3,QtWidgets.QTableWidgetItem(str(registro["DESCRIPCION_TRAZA"])))
            self.tw_seleccion.setItem(self.tw_seleccion.rowCount()-1,4,QtWidgets.QTableWidgetItem(str(registro["CODIGO"])))
            self.tw_seleccion.setItem(self.tw_seleccion.rowCount()-1,5,QtWidgets.QTableWidgetItem(str(registro["longitude"])))
            self.tw_seleccion.setItem(self.tw_seleccion.rowCount()-1,6,QtWidgets.QTableWidgetItem(str(registro["latitude"])))
            self.tw_seleccion.setItem(self.tw_seleccion.rowCount()-1,7,QtWidgets.QTableWidgetItem(str(registro["photo"])))
            self.tw_seleccion.setItem(self.tw_seleccion.rowCount()-1,8,QtWidgets.QTableWidgetItem(str(registro["fid"])))
